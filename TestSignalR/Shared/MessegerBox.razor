@inject TradingPlatformBlazor.Data.Repository.IMessage SqlMessage
@inject TradingPlatformBlazor.Data.Repository.IUser SqlUser
@inject IHttpContextAccessor htp
@inject NavigationManager nav
@implements IAsyncDisposable

<AuthorizeView>
    <NotAuthorized>Авторизуйтесь!</NotAuthorized>
    <Authorized>
        @if (currentUser == null)
        {


            <h1>Тут будут ваши сообщения</h1>
        }
        else
        {
            <div class="py-2 px-4 border-bottom d-none d-lg-block">
                <div class="d-flex align-items-center py-1">
                    <div class="position-relative">
                        <img src="/img//avatars/@currentUser.PathAvatar" class="rounded-circle mr-1" alt="@currentUser.NickName" width="40" height="40">
                    </div>
                    <div class="flex-grow-1 pl-3">
                        <strong>@currentUser.NickName</strong>
                        <div class="text-muted small"><em>Online</em></div>
                    </div>
                    <div>

                        <button class="btn btn-light border btn-lg px-3"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-more-horizontal feather-lg"><circle cx="12" cy="12" r="1"></circle><circle cx="19" cy="12" r="1"></circle><circle cx="5" cy="12" r="1"></circle></svg></button>
                    </div>
                </div>
            </div>

            <div class="position-relative">
                <div class="chat-messages p-4">

                    @foreach (var item in messages)
                    {
                        if (item.FromUserId == myId)
                        {
                            selectorClass = "chat-message-right pb-4";
                        }
                        else
                        {
                            selectorClass = "chat-message-left pb-4";
                        }
                        <div class="@selectorClass">
                            <div>
                                <img src="/img/avatars/@SqlUser.GetUserById(item.FromUserId).PathAvatar" class="rounded-circle mr-1" alt="Chris Wood" width="40" height="40" />
                                <div class="text-muted small text-nowrap mt-2">@item.DateMessage.ToString("t")</div>
                            </div>
                            <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                                <div class="font-weight-bold mb-1">@SqlUser.GetUserById(item.FromUserId).NickName</div>
                                @item.BodyMessage
                            </div>
                        </div>
                    }

                    @*<div class="chat-message-right pb-4">
                            <div>
                                <img src="https://bootdey.com/img/Content/avatar/avatar1.png" class="rounded-circle mr-1" alt="Chris Wood" width="40" height="40">
                                <div class="text-muted small text-nowrap mt-2">2:33 am</div>
                            </div>
                            <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                                <div class="font-weight-bold mb-1">You</div>
                                Lorem ipsum dolor sit amet, vis erat denique in, dicunt prodesset te vix.
                            </div>
                        </div>*@
                    <div class="flex-grow-0 py-3 px-4 border-top">
                        <div class="input-group">
                            <input type="text" @bind="messageInput" class="form-control" placeholder="Type your message">
                            <button class="btn btn-primary" @onclick="Send">Send</button>
                        </div>
                    </div>

                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>
@*<button @onclick="ClearWin">TEST</button>*@
@code {
    [Parameter]
    public int IdСompanion { get; set; }
    private List<Message> messages = new List<Message>();
    private HubConnection hubConnection;
    private string messageInput;
    User currentUser;
    private int myId;
    private string selectorClass;


    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
       .WithUrl(nav.ToAbsoluteUri("/hub"), opt =>
       {
           if (htp.HttpContext.Request.Cookies.Count > 0)
           {
               opt.Cookies.Add(new Uri(nav.BaseUri), new System.Net.Cookie("Cookie", htp.HttpContext.Request.Cookies.Where(s => s.Key == "Cookie").FirstOrDefault().Value));
           }
       }).Build();

        hubConnection.On<int>("Update", (id) =>
        {
            ClearWin();
            UpdateComponion(id);
            StateHasChanged();
        });

        hubConnection.On<Message>("ReceiveMessage", (message) =>
        {
            if (message.FromUserId == IdСompanion || (message.ToUserId == IdСompanion && message.FromUserId == myId))
            {

                messages.Add(message);
                StateHasChanged();
            }

        });

        await hubConnection.StartAsync();
    }

    async Task Send()
    {
        Message message = new Message()
        {
            BodyMessage = messageInput,
            DateMessage = DateTime.Now,
            FromUserId = myId,
            ToUserId = IdСompanion
        };
        await hubConnection.SendAsync("SendSpecific", message);
        messageInput = string.Empty;
        SqlMessage.AddMessage(message);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public void UpdateComponion(int id)
    {
        IdСompanion = id;
        currentUser = SqlUser.GetUserById(IdСompanion);
        myId = int.Parse(htp.HttpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);
        var fromMessages = SqlMessage.GetMessagesByIdFromAndIdTo(myId, IdСompanion).ToList();
        var toMessages = SqlMessage.GetMessagesByIdFromAndIdTo(IdСompanion, myId).ToList();
        messages.AddRange(fromMessages);
        messages.AddRange(toMessages);
        messages = messages.OrderBy(c => c.DateMessage).ToList();
    }
    public void ClearWin()
    {
        messages.Clear();
        currentUser = null;
    }
    void Debug()
    {

    }
    public void RefreshMe()
    {
        StateHasChanged();

    }
}