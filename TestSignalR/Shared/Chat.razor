@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager nav
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor htp
@implements IAsyncDisposable
@inject TradingPlatformBlazor.Data.Repository.IUser user
@inject TradingPlatformBlazor.Data.Repository.IMessage SqlMessage


<div class="page-content page-container" id="page-content">
        <div class="row container d-flex justify-content-center">
            <div class="col-md-6">
                <div class="card card-bordered">
                    <div class="card-header">
                        <a href="/user/@currentUser.Id"><img class="avatar" src="/img/avatars/@currentUser.PathAvatar" alt="...">  <h4 class="card-title"><strong>@currentUser.NickName</strong></h4></a>
                    </div>
                    <div class="ps-container ps-theme-default ps-active-y" id="chat-content" style="overflow-y: scroll !important; height:400px !important;">
                        @foreach(var item in messages)
                        {
                            if(item.FromUserId.ToString() == FromId)
                            {
                                selectorClass = "media media-chat media-chat-reverse";
                            }
                            else { selectorClass = "media media-chat"; }
                                <div class="@selectorClass">
                                    <div class="media-body">
                                        <p>@item.BodyMessage</p>
                                        <p class="meta"><time datetime="@item.DateMessage.Year">@item.DateMessage.ToString("t")</time></p>
                                    </div>
                                </div>
                            }
                        
                        
                        <div class="ps-scrollbar-x-rail" style="left: 0px; bottom: 0px;">
                            <div class="ps-scrollbar-x" tabindex="0" style="left: 0px; width: 0px;"></div>
                        </div>
                        <div class="ps-scrollbar-y-rail" style="top: 0px; height: 0px; right: 2px;">
                            <div class="ps-scrollbar-y" tabindex="0" style="top: 0px; height: 2px;"></div>
                        </div>
                    </div>
                    <div class="publisher bt-1 border-light"> 
                    <img class="avatar avatar-xs" src="/img/avatars/@htp.HttpContext.User.Claims.First(i => i.Type == "PathAvatar").Value" alt="..."> 
                    <input class="publisher-input" @bind="messageInput" type="text" placeholder="Write something"> <button @onclick="Send" class="btn publisher-btn">Send</button> 
                    </div>
                </div>
            </div>
        </div>
</div>

@code {
    [Parameter]
    public int ToUserId { get; set; }
    private string FromId;
    private HubConnection hubConnection;
    private List<Message> messages = new List<Message>();
    private string messageInput;
    private User currentUser;

    private string selectorClass;
    protected override async Task OnInitializedAsync()
    {

        currentUser = user.GetUserById(ToUserId);
        FromId = htp.HttpContext.User.Claims.FirstOrDefault(i => i.Type == ClaimTypes.NameIdentifier).Value;
        var fromMessages = SqlMessage.GetMessagesByIdFromAndIdTo(int.Parse(FromId), ToUserId).ToList();
        var toMessages = SqlMessage.GetMessagesByIdFromAndIdTo(ToUserId, int.Parse(FromId)).ToList();
        messages.AddRange(fromMessages);
        messages.AddRange(toMessages);
        hubConnection = new HubConnectionBuilder()
   .WithUrl(nav.ToAbsoluteUri("/hub"), opt =>
   {
       if (htp.HttpContext.Request.Cookies.Count > 0)
       {
           opt.Cookies.Add(new Uri(nav.BaseUri), new System.Net.Cookie("Cookie", htp.HttpContext.Request.Cookies.Where(s => s.Key == "Cookie").FirstOrDefault().Value));
       }
   }).Build();

        hubConnection.On<Message>("ReceiveMessage", (message) =>
        {
            //if (message.FromUserId == int.Parse(FromId) || (message.ToUserId == int.Parse(FromId) && message.FromUserId == ToUserId))
            //{
            messages.Add(message);
            StateHasChanged();

        });

        await hubConnection.StartAsync();


    }

    async Task Send()
    {
        Message message = new Message()
        {
            BodyMessage = messageInput,
            DateMessage = DateTime.Now,
            FromUserId = int.Parse(FromId),
            ToUserId = ToUserId
        };
        await hubConnection.SendAsync("SendSpecific", message);
        messageInput = string.Empty;
        SqlMessage.AddMessage(message);
        StateHasChanged();
    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
