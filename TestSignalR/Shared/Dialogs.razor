@inject NavigationManager nav
@inject TradingPlatformBlazor.Data.Repository.IUser SqlUser
@inject TradingPlatformBlazor.Data.Repository.IMessage SqlMessage
@inject IHttpContextAccessor htp
@implements IAsyncDisposable

<AuthorizeView>
    <div class="col-12 col-lg-5 col-xl-3 border-right">

        <div class="px-4 d-none d-md-block">
            <div class="d-flex align-items-center">
            </div>
        </div>
        @foreach (var item in GroupDialogs)
        {
            var _user = Get(item.Key);
            <a @onclick="(() => Change(_user.Id))" class="list-group-item list-group-item-action border-0">
                <div class="badge bg-success float-right"></div>
                <div class="d-flex align-items-start">
                    <img src="/img/avatars/@_user.PathAvatar" class="rounded-circle mr-1" alt="@_user.NickName" width="40" height="40">
                    <div class="flex-grow-1 ml-3">
                        @_user.NickName
                        <div class="small">

                            <span class="fas fa-circle chat-online"></span>@MiniMessage(item.Last().BodyMessage)
                        </div>
                    </div>
                </div>
            </a>

        }
        @*<a href="#" class="list-group-item list-group-item-action border-0">
                <div class="badge bg-success float-right">2</div>
                <div class="d-flex align-items-start">
                    <img src="https://bootdey.com/img/Content/avatar/avatar2.png" class="rounded-circle mr-1" alt="William Harris" width="40" height="40">
                    <div class="flex-grow-1 ml-3">
                        William Harris
                        <div class="small"><span class="fas fa-circle chat-online"></span> Online
                    </div>
                </div>
            </a>*@


        <hr class="d-block d-lg-none mt-1 mb-0">
    </div>
</AuthorizeView>
@code {

    [Parameter]
    public EventCallback<int> OnCompanionIdChanhed { get; set; }
    [Parameter]
    public int TestId { get; set; }
    HubConnection hubConnection;
    private IEnumerable<Message> dialogs = new List<Message>();
    public string notify;
    private int currentId;
    IEnumerable<IGrouping<int, Message>> GroupDialogs;


    protected override async Task OnInitializedAsync()
    {
        if (!(htp.HttpContext.User.Claims.Count() < 2))
        {
            currentId = int.Parse(htp.HttpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);
            dialogs = SqlMessage.GetMessagesByToId(currentId).ToList().OrderBy(t => t.DateMessage).Reverse();
            GroupDialogs = dialogs.GroupBy(g => g.FromUserId).ToList();
            hubConnection = new HubConnectionBuilder()
          .WithUrl(nav.ToAbsoluteUri("/hub"), opt =>
          {
              if (htp.HttpContext.Request.Cookies.Count > 0)
              {
                  opt.Cookies.Add(new Uri(nav.BaseUri), new System.Net.Cookie("Cookie", htp.HttpContext.Request.Cookies.Where(s => s.Key == "Cookie").FirstOrDefault().Value));
              }
          }).Build();
            hubConnection.On<Message>("ReceiveMessage", (message) =>
            {
                UpdateWindow();
                // dialogs.ToList().Add(message);

            });
            await hubConnection.StartAsync();
        }

    }

    User Get(int id)
    {
        return SqlUser.GetUserById(id);
    }
    string MiniMessage(string str)
    {
        if (str.Length > 10)
        {
            return new string(str.Substring(0, 10) + "...");
        }
        return str;
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task Change(int id)
    {

        await hubConnection.SendAsync("UpdateCompanionId", id);
        await OnCompanionIdChanhed.InvokeAsync(id);
    }

    private void UpdateWindow()
    {

        dialogs = SqlMessage.GetMessagesByToId(currentId).ToList().OrderBy(t => t.DateMessage).Reverse();
        GroupDialogs = dialogs.GroupBy(g => g.FromUserId).ToList();
        StateHasChanged();
    }
}