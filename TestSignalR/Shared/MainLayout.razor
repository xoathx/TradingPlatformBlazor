@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject TradingPlatformBlazor.Data.Repository.IUser SqlUser
@inject TradingPlatformBlazor.Data.Repository.IShop SqlShop
@implements IAsyncDisposable 
<div class="page">
    <!--<div class="sidebar">-->
    @*<NavMenu />*@

    <!--</div>-->

    <div class="main">
        <AuthorizeView>
            <Authorized>
                <div class="opasity-bg-main top-row px-4 d-flex">

                    <a class="logo-site" href="/"><img src="img/resources/logo.png" /></a>
                    <AuthorizeView Context="any" Roles="Administrator">
                        <a href="/admin"><span class="oi oi-browser" alt="AdminPanel"></span></a>
                    </AuthorizeView>

                    @if (user.IdShop != 0)
                    {<a href="/shop/@ShopUrl(user.IdShop)"><span class="oi oi-briefcase" alt="Buisnes"></span></a>}
                    @if (user.LevelUser == UserLevel.Third && user.IdShop == 0)
                    {<a href="/createshop"><span class="oi oi-briefcase" alt="Buisnes"></span></a>}
                    <a href="/purchases"><span class="oi oi-cart" alt="Покупки"></span></a>
                    <a href="/sales"><span class="oi oi-transfer" alt="Продажи"></span></a>
                    <a href="/messager"><span class="oi oi-chat" alt="Messeger"></span></a>
                    @*<a class="finance-layout" href="#"><span class="oi oi-dollar" alt="finance"></span></a>*@
                    <div class="balance-user">@user.Balance</div>
                    <div class="move-block">

                        <a class="a-logout" href="/logout"><span class="oi oi-account-logout"></span></a>
                        <a href="/user/@user.Id" target="_top"><img class="user-img-top" src="/img/avatars/@user.PathAvatar" /></a>
                    </div>

                </div>
</Authorized>
            <NotAuthorized>
                
                <div class="opasity-bg-main top-row px-4 d-flex">
                    <a class="logo-site" href="/"><img src="img/resources/logo.svg" /></a>
                    <div class="move-block">
                        <a href="/signup">Sign up</a>
                        <a href="/signin">Sign in</a>
                    </div>
                </div>
                
            </NotAuthorized>
        </AuthorizeView>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>

@code{
        [Inject] IHttpContextAccessor htp { get; set; }
        HubConnection hubConnection;

        User user;
    protected override async Task OnInitializedAsync()
    {
        if (htp.HttpContext.User.Claims.Any())
        {
            user = SqlUser.GetUserById(int.Parse(htp.HttpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value));
            hubConnection = new HubConnectionBuilder()
      .WithUrl(Navigation.ToAbsoluteUri("/hub"), opt =>
      {
          if (htp.HttpContext.Request.Cookies.Count > 0)
          {
              opt.Cookies.Add(new Uri(Navigation.BaseUri), new System.Net.Cookie("Cookie", htp.HttpContext.Request.Cookies.Where(s => s.Key == "Cookie").FirstOrDefault().Value));
          }
      }).Build();

            hubConnection.On<Message>("ReceiveMessage", (mess) =>
            {


                StateHasChanged();

            });
            await hubConnection.StartAsync();
        }

    }

    public void Dispose()
    {
        if (hubConnection != null)
        {
            hubConnection.DisposeAsync();
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    string ShopUrl(int shopId)
    {
        return SqlShop.GetShopById(shopId).ShortNameShop;
    }
}
