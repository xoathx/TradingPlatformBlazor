@page "/shop/{NameShop}"
@inject TradingPlatformBlazor.Data.Repository.ICategory SqlCategory
@inject TradingPlatformBlazor.Data.Repository.IShop SqlShop
@inject TradingPlatformBlazor.Data.Repository.IShopLot SqlShopLot
@inject TradingPlatformBlazor.Data.Repository.IUser SqlUser
@inject TradingPlatformBlazor.Data.Repository.IComment SqlComment
@inject IHttpContextAccessor htp
@inject IJSRuntime JSRuntime



<AuthorizeView>
    <NotAuthorized>
        <ErrorComponent ErrorCode="401"></ErrorComponent>
    </NotAuthorized>
    <Authorized>
        @if (CurrentShop == null)
        {<ErrorComponent ErrorCode="404"></ErrorComponent> }
        else
        {

           
            <img class="profile-avatar-shop d-inline" src="/img/avatars/@CurrentShop.PathAvatarShop" />
            <h1 class="d-inline">@NameShop</h1>
            <AuthorizeView Roles="@role">
                <ChildContent Context="Any">
                    <div class="d-inline">
                        <label class="settings" for="set-button">
                            <span class="oi oi-terminal"></span>
                        </label>
                        <button class="set-button" id="set-button" @onclick="OpenDialog"></button>
                    </div>
                </ChildContent>
            </AuthorizeView>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="row border">
                            <div class="col name-category-user border-right">
                                Категория
                            </div>
                            <div class="col name-lot-user">
                                Название лота
                            </div>
                            <div class="col desc-lot-user border-left">
                                Описание
                            </div>
                        </div>

                        @foreach (var item in shopLots)
                        {
                            <a class="a-lot-user" href="/shoplot/@item.Id">
                                <div class="row border lot-body">

                                    <div class="col name-category-user border-right">
                                        @CategoryName(item.CategoryId)
                                    </div>
                                    <div class="col name-lot-user ">
                                        @item.NameLot
                                    </div>
                                    <div class="col desc-lot-user border-left">
                                        @MiniString(item.DescLot)
                                    </div>
                                </div>
                            </a>
                        }
                    </div>



                    <div class="col">
                        @if (CurrentUser.IdShop != CurrentShop.Id)
                        {
                            <ChatShop ToShopId="CurrentShop.Id"></ChatShop>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="comments-user ">
                        <div class="h-comments-user">
                            <p class="text-muted">Отзывы</p>
                        </div>
                        <div class="container">
                            @foreach (var comment in Comments)
                            {
                                <a class="a-comment-user" href="/offer/@comment.OfferId">
                                    <div class="row border comment-body">


                                        <div class="col nickname-comment-user">
                                            <img class="avatar d-inline avatar-comment-user" src="/img/avatars/@SqlUser.GetUserById(comment.FromUserId).PathAvatar" />
                                            @SqlUser.GetUserById(comment.FromUserId).NickName
                                        </div>
                                        <div class="col bodytext-comment-user"><p>@comment.BodyComment</p></div>
                                        <div class="col">
                                            <div class="rating-mini rating-comment-user">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    if (i <= comment.ValueRating)
                                                    {
                                                        selector = "active";
                                                        <span class="@selector"></span>
                                                    }
                                                    else
                                                    {
                                                        <span></span>
                                                    }
                                                }

                                            </div>
                                        </div>
                                    </div>

                                </a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }


        @if (DialogOpen)
        {
            <ShopSettings CurrentShop="CurrentShop" OnClose="OnDialogClose"></ShopSettings>
        }


    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public string NameShop { get; set; }
    private Shop CurrentShop;
    private User CurrentUser;
    private string role;
    string selector;
    IEnumerable<ShopLot> shopLots = new List<ShopLot>();
    IEnumerable<Comment> Comments = new List<Comment>();

    public bool DialogOpen { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentShop = SqlShop.GetShopByShortUrl(NameShop);

        if (CurrentShop != null)
        {
            if (htp.HttpContext.User.Claims.Count() > 0)
            {
                CurrentUser = SqlUser.GetUserById(int.Parse(htp.HttpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value));
            }
            Comments = SqlComment.GetCommentsByShopId(CurrentShop.Id).ToList();
            role = SqlUser.GetUserById(CurrentShop.CreatedId).NickName;
            shopLots = SqlShopLot.GetShopLotsByShopId(CurrentShop.Id).ToList();
            await JSRuntime.InvokeVoidAsync("setTitle", "Магазин " + CurrentShop.NameShop);
        }
    }



    string CategoryName(int categoryId)
    {
        return SqlCategory.GetNameCategory(categoryId);
    }
    string MiniString(string str)
    {
        if (string.IsNullOrWhiteSpace(str)) { return str; }
        else
        {
            if (str.Length > 50)
            {
                return new string(str.Substring(0, 50) + "...");
            }
            return str;
        }
    }

    private void OnDialogClose()
    {
        DialogOpen = false;
    }
    private void OpenDialog()
    {
        DialogOpen = true;
    }

}
