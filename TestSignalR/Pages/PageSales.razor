@page "/sales"
@inject TradingPlatformBlazor.Data.Repository.IOffer SqlOffer
@inject TradingPlatformBlazor.Data.Repository.IUser SqlUser
@inject IHttpContextAccessor htp;
@attribute [Authorize]

    <AuthorizeView>
        <h3>PageSales</h3>

        <div class="sales-content">
            <div class="container">
                <div class="row">
                    <div class="col">Дата</div>
                    <div class="col">Номер заказа</div>
                    <div class="col-2">Описание</div>
                    <div class="col">Покупатель</div>
                    <div class="col">Статус</div>
                    <div class="col">Сумма</div>
                </div>
                @foreach (var item in Offers)
                {
                    <a class="a-pagesales" href="/offer/@item.Id">
                        <div class="row border content-body-sales">
                            <div class="col border-right"><p>@item.DateClosing.ToString("D")</p></div>
                            <div class="col border-right"><p>#@item.IdentifierName</p></div>
                            <div class="col-2 border-right desc-offer-sales"><p>@item.LotsDesc</p></div>
                            <div class="col border-right d-inline">
                                <a class="a-pagesales" href="/user/@item.CustomerId">
                                    <img class="avatar avatar-customer-pagesales" src="img/avatars/@SqlUser.GetUserById(item.CustomerId).PathAvatar" />
                                    <div class="nickname-customer-pagesales">@SqlUser.GetUserById(item.CustomerId).NickName</div>
                                </a>
                            </div>
                            <div class="col border-right"><p>@StateCurOffer(item.StateOffer)</p></div>
                            <div class="col"><p>@item.LotsPrice</p></div>
                        </div>
                    </a>
                }
            </div>
        </div>
    </AuthorizeView>
    @code {
        private IEnumerable<Offer> Offers;
        private int CurrentUserId;
        private string State;
        protected override void OnInitialized()
        {
            if (htp.HttpContext.User.Claims.Count() > 0)
            {
                CurrentUserId = int.Parse(htp.HttpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);
                Offers = SqlOffer.GetOffersByVendorId(CurrentUserId).ToList();
            }
        }

        string StateCurOffer(StateOffer state)
        {
            switch (state)
            {
                case StateOffer.Canceled:
                    State = "Отменен";
                    break;
                case StateOffer.InProcess:
                    State = "В процессе";
                    break;
                case StateOffer.Completed:
                    State = "Завершен";
                    break;
                case StateOffer.ManyBack:
                    State = "Возврат";
                    break;
                default:
                    State = state.ToString();
                    break;
            }
            return State;
        }
    }
